# -*- coding: utf-8 -*-
"""Data Science Project 2: Electric Boogaloo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12OUbB2G7dBVJyD60ZZAGHRuX96D_Z3pS
"""

# *************************************
# Import all required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.preprocessing import LabelEncoder
from sklearn.impute import KNNImputer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import f1_score, mean_squared_error, r2_score
from sklearn.ensemble import RandomForestRegressor

"""The following code block will implement the Random Forest Regressor Model on our chosen dataset. This code block will predict the price of a home based on its number of bedrooms, bathrooms, and square footage. Three graphs showing its accuracy are produced."""

# *************************************
# Step 1: Import Dataset
data = pd.read_csv('data.csv')
data = pd.DataFrame(data[['price', 'sqft_lot', 'bedrooms', 'bathrooms']])


# *************************************
# Step 2: Data Preparation
label_encoder = LabelEncoder()
data['bedrooms'] = label_encoder.fit_transform(data['bedrooms'])

data.dropna(inplace=True)

# Remove unnecessary columns
X = data[['bedrooms', 'bathrooms', 'sqft_lot']].values # Select our features
y = data['price'].values


# *************************************
# Step 3: Implement Random Forest Regressor Model
# Fitting Random Forest Regression to the dataset
regressor = RandomForestRegressor(n_estimators=10, random_state=0)

# Fit the regressor with x and y data
regressor.fit(X, y)


# *************************************
# Step 4: Validation
# Making predictions on the same data or new data
predictions = regressor.predict(X)

# Evaluating the model
mse = mean_squared_error(y, predictions)
print(f'Mean Squared Error: {mse}')

r2 = r2_score(y, predictions)
print(f'R-squared: {r2}')


# *************************************
# Step 5: Visualization
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

for i, feature in enumerate(['Bedrooms', 'Bathrooms', 'Square Feet']):
    axs[i].scatter(X[:, i], y, color='blue', label='Actual')
    axs[i].scatter(X[:, i], predictions, color='red', label='Predicted')
    axs[i].set_xlabel(feature)
    axs[i].set_ylabel('Price')
    axs[i].legend()

plt.tight_layout()
plt.show()

"""The following code block will implement the Random Forest Regressor Model on a subset of the dataset, attempting to predict the price based on the number of bedrooms, bathrooms, and square footage of the home. The model will then be tested with a different subset of the original dataset. The results are stored in a .csv file."""

# *************************************
# Step 1: Import Dataset
main_data = pd.read_csv('MainData.csv')
main_data = pd.DataFrame(main_data[['price', 'sqft_lot', 'bedrooms', 'bathrooms']])

test_data = pd.read_csv('TestData.csv')
test_data = pd.DataFrame(test_data[['price', 'sqft_lot', 'bedrooms', 'bathrooms']])


# *************************************
# Step 2: Data Preparation
label_encoder = LabelEncoder()
main_data['bedrooms'] = label_encoder.fit_transform(main_data['bedrooms'])
main_data.dropna(inplace=True)

test_data['bedrooms'] = label_encoder.transform(test_data['bedrooms'])
test_data.dropna(inplace=True)

# Remove unnecessary columns
X = main_data[['bedrooms', 'bathrooms', 'sqft_lot']].values  # Select our features
y = main_data['price'].values


# *************************************
# Step 3: Implement Random Forest Regressor Model
# Fitting Random Forest Regression to the dataset
regressor = RandomForestRegressor(n_estimators=10, random_state=0)

# Fit the regressor with x and y data
regressor.fit(X, y)


# *************************************
# Step 4: Validation
# Make predictions on the data
predictions = regressor.predict(X)

# Evaluate the model
mse = mean_squared_error(y, predictions)
print(f'Mean Squared Error: {mse}')

r2 = r2_score(y, predictions)
print(f'R-squared: {r2}')

errors = []  # List to store errors

# Iterate through the test data
for index, row in test_data.iterrows():
    var1 = test_data.loc[index, 'bedrooms']
    var2 = test_data.loc[index, 'bathrooms']
    var3 = test_data.loc[index, 'sqft_lot']

    input_data = np.array([[var1, var2, var3]])

    # Use the trained regressor to make predictions on the test data
    predicted_price = regressor.predict(input_data)

    # Compare it to the real data
    error = np.abs(test_data.loc[index, 'price'] - predicted_price)  # Absolute difference between predicted and actual values
    errors.append(error[0])  # Append the error for this prediction


# *************************************
# Step 5: Store the results
errors = np.array(errors)
mean_error = np.mean(errors)
print(f"Mean predicted price error: {np.round(mean_error, 2)}")

# Create a DataFrame for errors
results_df = pd.DataFrame({
    'Bedrooms' : test_data['bedrooms'],
    'Bathrooms' : test_data['bathrooms'],
    'Square Feet' : test_data['sqft_lot'],
    'Test Price': np.round(test_data['price']),
    ' ': "",
    'Predicted Price': np.round(regressor.predict(test_data[['bedrooms', 'bathrooms', 'sqft_lot']]), 2),
    'Error': np.round(errors.flatten(), 2)
})

# Export the results to a new CSV file
results_df.to_csv('PricePrediction.csv', index=False)

"""The following code block will test the implementation the Random Forest Regressor Model with custom values. It will attempt to predict the price of a home based on the number of bedrooms, bathrooms, and square footage."""

# Test the data
bedrooms = int(input("Enter the number of bedrooms: "))
bathrooms = float(input("Enter the number of bathrooms: "))
square_footage = float(input("Enter the square footage: "))

# Assuming you have your test data stored in a DataFrame called test_data
# Prepare the test data in the same format as your training data
input_data = np.array([[bedrooms, bathrooms, square_footage]])

# Use the trained regressor to make predictions on the test data
predicted_price = regressor.predict(input_data)

print(f"The predicted price for the input parameters is: ${predicted_price[0]:,.2f}")

"""The following code block will implement the Random Forest Regressor Model on our chosen dataset. This code block will predict the square footage of a home based on its number of bedrooms, bathrooms, and price. Three graphs showing its accuracy are produced."""

# *************************************
# Step 1: Import Dataset
data = pd.read_csv('data.csv')
data = pd.DataFrame(data[['price', 'sqft_lot', 'bedrooms', 'bathrooms']])

# *************************************
# Step 2: Data Preparation
label_encoder = LabelEncoder()
data['bedrooms'] = label_encoder.fit_transform(data['bedrooms'])

data.dropna(inplace=True)

# Remove unnecessary columns
X = data[['bedrooms', 'bathrooms', 'price']].values # Select our features
y = data['sqft_lot'].values


# *************************************
# Step 3: Implement Random Forest Regressor Model
# Fitting Random Forest Regression to the dataset
regressor = RandomForestRegressor(n_estimators=10, random_state=0)

# Fit the regressor with x and y data
regressor.fit(X, y)


# *************************************
# Step 4: Validation
# Making predictions on the same data or new data
predictions = regressor.predict(X)

# Evaluating the model
mse = mean_squared_error(y, predictions)
print(f'Mean Squared Error: {mse}')

r2 = r2_score(y, predictions)
print(f'R-squared: {r2}')

# *************************************
# Step 5: Visualization
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

for i, feature in enumerate(['Bedrooms', 'Bathrooms', 'Price']):
    axs[i].scatter(X[:, i], y, color='blue', label='Actual')
    axs[i].scatter(X[:, i], predictions, color='red', label='Predicted')
    axs[i].set_xlabel(feature)
    axs[i].set_ylabel('Square Feet')
    axs[i].legend()

plt.tight_layout()
plt.show()

# *************************************
# Step 1: Import Dataset
main_data = pd.read_csv('MainData.csv')
main_data = pd.DataFrame(main_data[['price', 'sqft_lot', 'bedrooms', 'bathrooms']])

test_data = pd.read_csv('TestData.csv')
test_data = pd.DataFrame(test_data[['price', 'sqft_lot', 'bedrooms', 'bathrooms']])


# *************************************
# Step 2: Data Preparation
label_encoder = LabelEncoder()
main_data['bedrooms'] = label_encoder.fit_transform(main_data['bedrooms'])
main_data.dropna(inplace=True)

test_data['bedrooms'] = label_encoder.transform(test_data['bedrooms'])
test_data.dropna(inplace=True)

# Remove unnecessary columns
X = main_data[['bedrooms', 'bathrooms', 'price']].values  # Select our features
y = main_data['sqft_lot'].values


# *************************************
# Step 3: Implement Random Forest Regressor Model
# Fitting Random Forest Regression to the dataset
regressor = RandomForestRegressor(n_estimators=10, random_state=0)

# Fit the regressor with x and y data
regressor.fit(X, y)


# *************************************
# Step 4: Validation
# Make predictions on the data
predictions = regressor.predict(X)

# Evaluate the model
mse = mean_squared_error(y, predictions)
print(f'Mean Squared Error: {mse}')

r2 = r2_score(y, predictions)
print(f'R-squared: {r2}')

errors = []  # List to store errors

# Iterate through the test data
for index, row in test_data.iterrows():
    var1 = test_data.loc[index, 'bedrooms']
    var2 = test_data.loc[index, 'bathrooms']
    var3 = test_data.loc[index, 'price']

    input_data = np.array([[var1, var2, var3]])

    # Use the trained regressor to make predictions on the test data
    predicted_size = regressor.predict(input_data)

    # Compare it to the real data
    error = np.abs(test_data.loc[index, 'sqft_lot'] - predicted_size)  # Absolute difference between predicted and actual values
    errors.append(error[0])  # Append the error for this prediction


# *************************************
# Step 5: Store the results
errors = np.array(errors)
mean_error = np.mean(errors)
print(f"Mean predicted size error: {np.round(mean_error, 2)}")

# Create a DataFrame for errors
results_df = pd.DataFrame({
    'Bedrooms' : test_data['bedrooms'],
    'Bathrooms' : test_data['bathrooms'],
    'Price' : np.round(test_data['price']),
    'Test Size': test_data['sqft_lot'],
    ' ': "",
    'Predicted Size': np.round(regressor.predict(test_data[['bedrooms', 'bathrooms', 'price']]), 2),
    'Error': np.round(errors.flatten(), 2)
})

# Export the results to a new CSV file
results_df.to_csv('SizePrediction.csv', index=False)

"""The following code block will test the implementation the Random Forest Regressor Model with custom values. It will attempt to predict the square footage of a home based on the number of bedrooms, bathrooms, and price."""

# Test the data
bedrooms = int(input("Enter the number of bedrooms: "))
bathrooms = float(input("Enter the number of bathrooms: "))
price = float(input("Enter the price: "))

# Assuming you have your test data stored in a DataFrame called test_data
# Prepare the test data in the same format as your training data
input_data = np.array([[bedrooms, bathrooms, price]])

# Use the trained regressor to make predictions on the test data
predicted_size = regressor.predict(input_data)
print(f"The predicted square footage is {predicted_size[0]}")